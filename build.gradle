// gradle task and plugin configuration
buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'
        classpath 'net.ltgt.gradle:gradle-apt-plugin:0.15'
    }
}

apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'net.ltgt.apt-idea'

// global settings
group 'io.cloudwall'
version '0.1.3'
sourceCompatibility = JavaVersion.VERSION_1_9
targetCompatibility = JavaVersion.VERSION_1_9
repositories {
    jcenter()
    maven { url "https://jitpack.io" }
    maven { url 'http://download.oracle.com/maven' }
    maven { url 'https://dl.bintray.com/io-cloudwall/cloudwall-maven' }
}

sourceSets {
    examples {
        java {
            srcDir 'src/examples/java'
        }
        resources {
            srcDir 'src/examples/resources'
        }
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}
idea.module.generatedSourceDirs += sourceSets.examples.output.generatedSourcesDir

dependencies {
    compile 'args4j:args4j:2.33',
            'com.google.code.findbugs:jsr305:3.0.2',
            'com.google.dagger:dagger:2.14.1',
            'com.typesafe:config:1.3.3',
            'org.apache.logging.log4j:log4j-api:2.10.0',
            'org.apache.logging.log4j:log4j-core:2.10.0',
            'org.fusesource.jansi:jansi:1.17'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.15'
    examplesAnnotationProcessor 'com.google.dagger:dagger-compiler:2.15'
    testCompile 'junit:junit:4.12',
                'org.hamcrest:hamcrest-library:1.4-atlassian-1',
                'org.mockito:mockito-core:2.15.0'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from tasks.javadoc.destinationDir
}

// workaround to suppress extra-noisy Javadoc lint and other warnings
allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task examplesJar(type: Jar, dependsOn: ['examplesClasses' ]) {
    from sourceSets.examples.output
    classifier = 'examples'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}

shadowDistZip {
    classifier = 'all'
}

shadowDistTar {
    classifier = 'all'
}

configurations.create('bintrayArchives')
artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
    archives examplesJar
    bintrayArchives jar
    bintrayArchives javadocJar
    bintrayArchives sourcesJar
    bintrayArchives examplesJar
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
   	key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
	configurations = ['bintrayArchives']
	pkg {
		repo = 'cloudwall-maven'
		name = 'bladerunner'
		userOrg = 'io-cloudwall'
        desc = 'Bladerunner App Config API'
        websiteUrl = 'https://github.com/cloudwall/bladerunner'
        issueTrackerUrl = 'https://github.com/cloudwall/bladerunner/issues'
		vcsUrl = 'https://github.com/cloudwall/bladerunner.git'
        licenses = ['Apache-2.0']

        githubRepo = 'cloudwall/bladerunner'
        githubReleaseNotesFile = 'README.md'

		version {
			name = project.version
			vcsTag = "v$project.version"
			attributes = ['gradle-plugin': "io.cloudwall:bladerunner:$project.version"]
		}
	}
}

mainClassName = 'cloudwall.appconfig.BladeRunner'
